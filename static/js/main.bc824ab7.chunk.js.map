{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["MAP_KEY","process","REACT_APP_MAP_KEY","ISS_URL","img","src","alt","height","SpaceStation","Map","state","center","lat","lng","zoom","getCoordinates","fetch","then","res","json","data","setState","iss_position","latitude","longitude","this","interval","setInterval","clearInterval","console","log","className","style","width","margin","bootstrapURLKeys","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0QAGMA,EAAUC,+HAAYC,kBACtBC,EAAU,0CACVC,EAAM,yBAAKC,IAAM,qIAAqIC,IAAM,MAAMC,OAAS,SAE3KC,EAAe,SAAC,GAAD,IAAGJ,EAAH,EAAGA,IAAH,OAAa,6BAAMA,IA0DzBK,E,4MAvDXC,MAAQ,CACJC,OAAQ,CACJC,IAAK,EACLC,IAAK,GAETC,KAAM,G,EAYVC,eAAiB,WACbC,MAAMb,GACDc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CACxBV,OAAQ,CACJC,IAAKQ,EAAKE,aAAaC,SACvBV,IAAKO,EAAKE,aAAaE,iB,kEAdnCC,KAAKV,iBACLU,KAAKC,SAAWC,YAAYF,KAAKV,eAAgB,O,6CAIjDa,cAAcH,KAAKC,Y,+BAiBnB,OAFAG,QAAQC,IAAI,OAAQL,KAAKf,MAAMC,OAAOC,KACtCiB,QAAQC,IAAI,OAAQL,KAAKf,MAAMC,OAAOE,KAEtC,6BACI,wCAAcY,KAAKf,MAAMC,OAAOC,KAChC,yCAAea,KAAKf,MAAMC,OAAOE,KACjC,yBAAKkB,UAAY,MAAMC,MAAO,CAAEzB,OAAQ,QAAS0B,MAAO,MAAOC,OAAQ,WACnE,kBAAC,IAAD,CAAgBH,UAAY,MACxBI,iBAAkB,CAACC,IAAKpC,GACxBW,OAAQc,KAAKf,MAAMC,OACnBG,KAAMW,KAAKf,MAAMI,MAEjB,kBAAC,EAAD,CAEJF,IAAOa,KAAKf,MAAMC,OAAOC,IACzBC,IAAOY,KAAKf,MAAMC,OAAOE,IACzBT,IAAOA,W,GA9CLiC,IAAMC,W,MCITC,MATf,WACE,OACE,yBAAKR,UAAU,OACb,2CACA,kBAAC,EAAD,QCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.bc824ab7.chunk.js","sourcesContent":["import React from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nconst MAP_KEY = process.env.REACT_APP_MAP_KEY\nconst ISS_URL = 'http://api.open-notify.org/iss-now.json'\nconst img = <img src = \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/International_Space_Station.svg/32px-International_Space_Station.svg.png\" alt = \"iss\" height = \"30px\"/>\n\nconst SpaceStation = ({ img }) => <div>{img}</div>\n\nclass Map extends React.Component {\n    state = {\n        center: {\n            lat: 0,\n            lng: 0\n        },\n        zoom: 1\n    }\n\n    componentDidMount(){\n        this.getCoordinates()\n        this.interval = setInterval(this.getCoordinates, 5000)\n    }\n    \n    componentWillUnmount(){\n        clearInterval(this.interval)\n    }\n    \n    getCoordinates = () => {\n        fetch(ISS_URL)\n            .then(res => res.json())\n            .then(data => this.setState({\n                center: {\n                    lat: data.iss_position.latitude,\n                    lng: data.iss_position.longitude\n                }\n            }))\n    }\n\n    render() {\n        console.log(\"LAT:\", this.state.center.lat)\n        console.log(\"LNG:\", this.state.center.lng)\n        return(\n        <div>\n            <p>Latitude: {this.state.center.lat}</p>\n            <p>Longitude: {this.state.center.lng}</p>\n            <div className = \"map\" style={{ height: '100vh', width: '80%', margin: '0 auto' }}>\n                <GoogleMapReact className = \"map\"\n                    bootstrapURLKeys={{key: MAP_KEY }}\n                    center={this.state.center}\n                    zoom={this.state.zoom}\n                >\n                    <SpaceStation\n\n                lat = {this.state.center.lat}\n                lng = {this.state.center.lng}\n                img = {img}\n            />\n\n                </GoogleMapReact>\n            </div>\n        </div>    \n        )\n    }\n}\n\nexport default Map;","import React from 'react';\nimport Map from './Map';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3>ISS Tracker</h3>\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}